# -*- coding: utf-8 -*-
"""Backup_and_toCSV_and_porcess.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Molx8GHgi_EH_h7wtCPzqH8tU8IboE9p

# 備份 txt 檔與轉換 csv 檔
以建檔日期當檔名
"""

import os
import datetime
import numpy as np
import pandas as pd

# 取得檔案的建立時間
filePath = './data.txt'                                     # 檔案路徑
unix_time = os.path.getctime(filePath)                      # 取得檔案修改時間，如果要用創立時間 用 os.path.getctime
datetimeObj = datetime.datetime.fromtimestamp(unix_time)    # 轉時間物件
dateStr = datetimeObj.strftime('%Y-%m-%d_%H-%M-%S')         # 轉字串
print(f'0. 檔案建立日期為：{dateStr}')


# 轉檔
# 1. 備份 txt 檔，在 txtFolder 資料夾。
raw_data = pd.read_csv (filePath, sep="s+", encoding='UTF-8', engine='python')     # 讀取
raw_data.to_csv (f'./txtFolder/{dateStr}.txt', index=False)                        # 備份 txt 檔
print(f'1. {dateStr}.txt 檔備份完畢，在 txtFloder 的資料夾。')

# 2. 匯出 csv 檔，在 csvFolder 資料夾。
# colunmNames = ['timeStamp','Cload', 'Kp', 'Ki', 'Kd', 'Kcpu', 'Imax', 'Imin', 'Err', 'PWR', 'MaxErr']   # 橫列 (column) 賦予名字
raw_data = pd.read_csv (filePath, sep="\s+", encoding='UTF-8', engine='python', header=None)      # 讀取
# raw_data = pd.read_csv (filePath, sep="\s+", encoding='UTF-8', engine='python')
convert_to_csv = raw_data.replace('',',')                                                               # 分隔：空白 → 逗點
raw_data.to_csv (f'./csvFolder/{dateStr}.csv')                                                          # 匯出成 csv 檔 (默認 index=True)
print(f'2. {dateStr}.csv 檔備份完畢，在 csvFloder 的資料夾。')

"""# 讀取剛剛生成的 csv 檔
目的：取出 Cload、Kp、Ki、Kd、Err、PWR_SUM、MAX_Err、Inlet (共 8 項)
"""

import pandas as pd

colunmNames = ['timeStamp','Cload', 'Kp', 'Ki', 'Kd', 'Kcpu', 'Imax', 'Imin', 'Err', 'PWR', 'MaxErr']                  # 橫列 (column) 賦予名字
# df = pd.read_csv (f'./txtFolder11/2021-07-31_17-42-0755.csv', sep=",", encoding='UTF-8', engine='python')              # 讀取

df1 = pd.read_csv (f'./csvFolder/{dateStr}.csv', sep=",", encoding='UTF-8', engine='python', names=colunmNames)
# print(df1)

df = df1.drop(index=0)
print(df)

"""# 尋找分界符號 '='
因為找出該位置的，下一列與下下列就是 Cload 與 Err 的橫列。

## 找出 Cload 為 '=' 的橫列
"""

# 篩選直行 (colunm) 為 Cload ，內容為 '=' 的項目
filterEqual = df['Cload'] == '='    # 找出 csv_file 檔中，在 Cload 索引中(直行) 為 '=' 的數值，回傳 True。
CloadEqual = df[filterEqual]            # 只顯示 csv_file 中為 True 的資料。
print(CloadEqual)

timeStampIndex = CloadEqual['timeStamp']

print(timeStampIndex)
print(type(timeStampIndex))

"""## 找出 Cload 與 Err 的橫列

### 生成與 timeStampIndex 相同長度的 list
利用 Python list 來運算
"""

print(timeStampIndex)                 # timeStampIndex 所在的

print(len(timeStampIndex))            # 含有 timeStampIndex 中，list 的長度

add1 = [1] * len(timeStampIndex)      # 以相同長度 +1
print(add1)

add2 = [2] * len(timeStampIndex)      # 以相同長度 +2
print(add2)

"""### 和 timeStampIndex 位置的 list 加法與減法"""

cloumnAdd1 = [a+b for a,b in zip(timeStampIndex, add1)]
print(f'+1：\n{cloumnAdd1}\n')

cloumnAdd2 = [a+b for a,b in zip(timeStampIndex, add2)]
print(f'+2：\n{cloumnAdd2}\n')

"""### list 轉 series
利用 series 篩選 DataFrame 的位置
"""

SeriesAdd1 = pd.Series(cloumnAdd1)
SeriesAdd2 = pd.Series(cloumnAdd2)

print(type(cloumnAdd1))             # list
print(type(SeriesAdd1))             # Series

"""# 取得資料 - Cload

## 取得橫列 - Cload
"""

x = df['timeStamp'].isin(SeriesAdd1)
# print(x)

Cload_data_index = df[x]                                      # 篩選出 Cload 橫列的資料
print(Cload_data_index)

"""## 去除多餘直行 - Cload"""

Cload_data = Cload_data_index.drop(['Err','PWR','MaxErr'], axis=1)
print(Cload_data)

"""## 調整 Cload 資料的 timeStamp 直行
為了和 Err 合併
"""

Cload_data['timeStamp'] = Cload_data['timeStamp']+1
print(Cload_data['timeStamp'])

"""## 匯出 Cload 檔案，檔名 <日期>_Cload.csv
存在 processCsvFolder 資料夾
"""

Cload_data.to_csv(f'./processCsvFolder/{dateStr}_Cload.csv', index=False)    # 確定匯出檔案無誤
print(f'3. 已於 processCsvFloder 資料夾，匯出檔案！\n檔名為：{dateStr}_Cload.csv')3.

"""# 取得資料 - Err

## 取得橫列 - Err
"""

Err_data_index = df['timeStamp'].isin(cloumnAdd2)
# print(Err_data_index)

Err_data = df[Err_data_index]
print(Err_data)

"""## 去除多餘的直行 - Err"""

ErrDrop = Err_data.drop(['Kcpu','Imax','Imin','Err','PWR','MaxErr'], axis=1)
# print(ErrDrop)

PWR_data = ErrDrop.rename(columns={'Cload':'Err', 'Kp':'PWR_SUM', 'Ki':'MAX_Err', 'Kd':'Inlet'})
print(PWR_data)

"""## 匯出 Err 檔案，檔名 <日期>_Err.csv
存在 processCsvFolder 資料夾
"""

PWR_data.to_csv(f'./processCsvFolder/{dateStr}_Err.csv', index=False)    # 確定匯出檔案無誤
print(f'4. 已於 processCsvFloder 資料夾，匯出檔案！\n檔名為：{dateStr}_Err.csv')

"""# 合併 Cload 和 Err

## 合併下面資料
"""

mergeCloadAndErr1 = pd.merge(Cload_data, PWR_data, on="timeStamp")
print(mergeCloadAndErr1)

"""## 第一欄位資料處理"""

ErrHead = df.head(2)
print(ErrHead)

head1 = ErrHead.drop(['Err','PWR','MaxErr'],axis=1)
print(head1)

CloadHead = head1.head(1)
print(CloadHead)

CloadHead['timeStamp'] = CloadHead['timeStamp']+1

ErrHead = head1.tail(1)
# print(ErrHead)

ErrDrop = ErrHead.drop(['Kcpu','Imax','Imin'], axis=1)

ErrRename = ErrDrop.rename(columns={'Cload':'Err', 'Kp':'PWR_SUM', 'Ki':'MAX_Err', 'Kd':'Inlet'})
print(ErrRename)

m1 = pd.merge(CloadHead, ErrRename, on='timeStamp')
print(m1)

"""# 合併成完整檔"""

m2 = pd.concat([m1, mergeCloadAndErr1], axis=0)
print(m2)

m2.to_csv(f'./processCsvFolder/{dateStr}_merge_data.csv', index=False)
print(f'5. 已於 processCsvFloder 資料夾，匯出檔案！\n檔名為：{dateStr}_merge_data.csv')

